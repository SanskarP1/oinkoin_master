// Mocks generated by Mockito 5.4.4 from annotations
// in piggybank/test/backup_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:piggybank/models/category-type.dart' as _i5;
import 'package:piggybank/models/category.dart' as _i4;
import 'package:piggybank/models/record.dart' as _i6;
import 'package:piggybank/models/recurrent-record-pattern.dart' as _i7;
import 'package:piggybank/services/database/database-interface.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DatabaseInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseInterface extends _i1.Mock implements _i2.DatabaseInterface {
  MockDatabaseInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Category?>> getAllCategories() => (super.noSuchMethod(
        Invocation.method(
          #getAllCategories,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Category?>>.value(<_i4.Category?>[]),
      ) as _i3.Future<List<_i4.Category?>>);

  @override
  _i3.Future<List<_i4.Category?>> getCategoriesByType(
          _i5.CategoryType? categoryType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoriesByType,
          [categoryType],
        ),
        returnValue: _i3.Future<List<_i4.Category?>>.value(<_i4.Category?>[]),
      ) as _i3.Future<List<_i4.Category?>>);

  @override
  _i3.Future<_i4.Category?> getCategory(
    String? categoryName,
    _i5.CategoryType? categoryType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategory,
          [
            categoryName,
            categoryType,
          ],
        ),
        returnValue: _i3.Future<_i4.Category?>.value(),
      ) as _i3.Future<_i4.Category?>);

  @override
  _i3.Future<int> addCategory(_i4.Category? category) => (super.noSuchMethod(
        Invocation.method(
          #addCategory,
          [category],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<int> updateCategory(
    String? existingCategoryName,
    _i5.CategoryType? existingCategoryType,
    _i4.Category? updatedCategory,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCategory,
          [
            existingCategoryName,
            existingCategoryType,
            updatedCategory,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<void> deleteCategory(
    String? name,
    _i5.CategoryType? categoryType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteCategory,
          [
            name,
            categoryType,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i6.Record?> getRecordById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getRecordById,
          [id],
        ),
        returnValue: _i3.Future<_i6.Record?>.value(),
      ) as _i3.Future<_i6.Record?>);

  @override
  _i3.Future<void> deleteRecordById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteRecordById,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<int> addRecord(_i6.Record? record) => (super.noSuchMethod(
        Invocation.method(
          #addRecord,
          [record],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<int?> updateRecordById(
    int? recordId,
    _i6.Record? newRecord,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRecordById,
          [
            recordId,
            newRecord,
          ],
        ),
        returnValue: _i3.Future<int?>.value(),
      ) as _i3.Future<int?>);

  @override
  _i3.Future<DateTime?> getDateTimeFirstRecord() => (super.noSuchMethod(
        Invocation.method(
          #getDateTimeFirstRecord,
          [],
        ),
        returnValue: _i3.Future<DateTime?>.value(),
      ) as _i3.Future<DateTime?>);

  @override
  _i3.Future<List<_i6.Record?>> getAllRecords() => (super.noSuchMethod(
        Invocation.method(
          #getAllRecords,
          [],
        ),
        returnValue: _i3.Future<List<_i6.Record?>>.value(<_i6.Record?>[]),
      ) as _i3.Future<List<_i6.Record?>>);

  @override
  _i3.Future<List<_i6.Record?>> getAllRecordsInInterval(
    DateTime? from,
    DateTime? to,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllRecordsInInterval,
          [
            from,
            to,
          ],
        ),
        returnValue: _i3.Future<List<_i6.Record?>>.value(<_i6.Record?>[]),
      ) as _i3.Future<List<_i6.Record?>>);

  @override
  _i3.Future<_i6.Record?> getMatchingRecord(_i6.Record? record) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMatchingRecord,
          [record],
        ),
        returnValue: _i3.Future<_i6.Record?>.value(),
      ) as _i3.Future<_i6.Record?>);

  @override
  _i3.Future<void> deleteFutureRecordsByPatternId(
    String? recurrentPatternId,
    DateTime? startingTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFutureRecordsByPatternId,
          [
            recurrentPatternId,
            startingTime,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<String>> suggestedRecordTitles(
    String? search,
    String? categoryName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #suggestedRecordTitles,
          [
            search,
            categoryName,
          ],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);

  @override
  _i3.Future<List<_i7.RecurrentRecordPattern>> getRecurrentRecordPatterns() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecurrentRecordPatterns,
          [],
        ),
        returnValue: _i3.Future<List<_i7.RecurrentRecordPattern>>.value(
            <_i7.RecurrentRecordPattern>[]),
      ) as _i3.Future<List<_i7.RecurrentRecordPattern>>);

  @override
  _i3.Future<_i7.RecurrentRecordPattern?> getRecurrentRecordPattern(
          String? recurrentPatternId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecurrentRecordPattern,
          [recurrentPatternId],
        ),
        returnValue: _i3.Future<_i7.RecurrentRecordPattern?>.value(),
      ) as _i3.Future<_i7.RecurrentRecordPattern?>);

  @override
  _i3.Future<void> addRecurrentRecordPattern(
          _i7.RecurrentRecordPattern? recordPattern) =>
      (super.noSuchMethod(
        Invocation.method(
          #addRecurrentRecordPattern,
          [recordPattern],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteRecurrentRecordPatternById(
          String? recurrentPatternId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteRecurrentRecordPatternById,
          [recurrentPatternId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateRecordPatternById(
    String? recurrentPatternId,
    _i7.RecurrentRecordPattern? pattern,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRecordPatternById,
          [
            recurrentPatternId,
            pattern,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteDatabase() => (super.noSuchMethod(
        Invocation.method(
          #deleteDatabase,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
